{"version":3,"sources":["pages/Nav.jsx","pages/HomePage.jsx","pages/Shop.jsx","pages/About.jsx","GameDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","NavStyle","color","style","to","className","HomePage","Shop","textStyle","borderRadius","useEffect","fetchGames","useState","games","setGames","a","fetch","data","json","console","log","results","map","game","key","id","src","background_image","width","height","alt","name","About","GameDetail","match","fetchGame","developers","clip","clips","setGame","params","controls","autoPlay","website","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PA0BeA,MAvBf,WAEI,IAAMC,EAAW,CACbC,MAAO,QAGX,OACI,6BACI,kBAAC,IAAD,CAAMC,MAAOF,EAAUG,GAAG,KACtB,qCAEJ,wBAAIC,UAAU,aACV,kBAAC,IAAD,CAAMF,MAAOF,EAAUG,GAAG,SACtB,qCAEJ,kBAAC,IAAD,CAAMD,MAAOF,EAAUG,GAAG,UACtB,yCCPLE,MARf,WACI,OACI,6BACI,0C,gCCiCGC,MApCf,WAEI,IAAMC,EAAY,CACdN,MAAO,YACPO,aAAc,QAGlBC,qBAAU,WACNC,MACD,IATS,MAYcC,mBAAS,IAZvB,mBAYLC,EAZK,KAYEC,EAZF,KAcNH,EAAU,uCAAG,8BAAAI,EAAA,sEACIC,MAAM,6EADV,cACTC,EADS,gBAGKA,EAAKC,OAHV,OAGTL,EAHS,OAIfM,QAAQC,IAAIP,EAAMQ,SAClBP,EAASD,EAAMQ,SALA,2CAAH,qDAQhB,OACI,yBAAKhB,UAAU,QACVQ,EAAMS,KAAI,SAAAC,GAAI,OACX,wBAAIlB,UAAU,WAAWmB,IAAKD,EAAKE,IAC/B,6BACI,yBAAKC,IAAKH,EAAKI,iBAAkBxB,MAAOK,EAAWoB,MAAM,MAAMC,OAAO,MAAMC,IAAI,MAEpF,kBAAC,IAAD,CAAM3B,MAAOK,EAAWJ,GAAE,gBAAWmB,EAAKE,KAAOF,EAAKQ,YCtB3DC,MARf,WACI,OACI,6BACI,4CCoCGC,MAvCf,YAAgC,IAAVC,EAAS,EAATA,MAEZ1B,EAAY,CACdN,MAAO,YACPO,aAAc,QAGlBC,qBAAU,WACNyB,IACAhB,QAAQC,IAAIc,KACb,IAVwB,MAaHtB,mBAAS,CAC7BwB,WAAY,GACZC,KAAM,GACNC,MAAO,KAhBgB,mBAapBf,EAboB,KAadgB,EAbc,KAoBrBJ,EAAS,uCAAG,8BAAApB,EAAA,sEACUC,MAAM,iCAAD,OAAkCkB,EAAMM,OAAOf,KAD9D,cACRU,EADQ,gBAEKA,EAAUjB,OAFf,OAERK,EAFQ,OAGdgB,EAAQhB,GACRJ,QAAQC,IAAIG,GAJE,2CAAH,qDAUf,OACI,6BACI,wBAAIpB,MAAOK,GAAYe,EAAKQ,MAC5B,2BAAO5B,MAAOK,EAAWkB,IAAKH,EAAKc,KAAKA,KAAMI,UAAQ,EAACC,UAAQ,EAACd,MAAM,MAAME,IAAI,KAChF,wBAAI3B,MAAOK,GAAYe,EAAKoB,W,aCTzBC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOwC,KAAK,SAASC,UAAWf,IAChC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,QAAQC,UAAWxC,IACrC,kBAAC,IAAD,CAAOuC,KAAK,YAAYC,UAAWd,QCRzBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.0efcd1f0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n\r\n    const NavStyle = {\r\n        color: '#fff'\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <Link style={NavStyle} to='/'>\r\n                <h3>Logo</h3>\r\n            </Link>\r\n            <ul className='Nav-links'>\r\n                <Link style={NavStyle} to='/shop'>\r\n                    <li>Shop</li>\r\n                </Link>\r\n                <Link style={NavStyle} to='/about'>\r\n                    <li>About</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from 'react'\r\n\r\n\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div>\r\n            <h1>HomePage</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Shop() {\r\n\r\n    const textStyle = {\r\n        color: 'gainsboro',\r\n        borderRadius: '15px'\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGames()\r\n    }, [])\r\n\r\n\r\n    const [games, setGames] = useState([])\r\n\r\n    const fetchGames = async () => {\r\n        const data = await fetch('https://api.rawg.io/api/games?dates=2019-10-10,2020-10-10&ordering=-added')\r\n\r\n        const games = await data.json()\r\n        console.log(games.results)\r\n        setGames(games.results)\r\n    }\r\n\r\n    return (\r\n        <div className='game'>\r\n            {games.map(game => (\r\n                <h1 className='gameText' key={game.id}>\r\n                    <div>\r\n                        <img src={game.background_image} style={textStyle} width='560' height='400' alt=\"\" />\r\n                    </div>\r\n                    <Link style={textStyle} to={`/shop/${game.id}`}>{game.name}</Link>\r\n                </h1>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Shop\r\n","import React from 'react'\r\n\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>About Page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n\r\nfunction GameDetail({ match }) {\r\n\r\n    const textStyle = {\r\n        color: 'gainsboro',\r\n        borderRadius: '15px'\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGame()\r\n        console.log(match)\r\n    }, [])\r\n\r\n\r\n    const [game, setGame] = useState({\r\n        developers: {},\r\n        clip: {},\r\n        clips: {}\r\n    })\r\n\r\n\r\n    const fetchGame = async () => {\r\n        const fetchGame = await fetch(`https://api.rawg.io/api/games/${match.params.id}`)\r\n        const game = await fetchGame.json()\r\n        setGame(game)\r\n        console.log(game)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={textStyle}>{game.name}</h1>\r\n            <video style={textStyle} src={game.clip.clip} controls autoPlay width='760' alt=\"\" />\r\n            <h2 style={textStyle}>{game.website}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameDetail\r\n","import React from 'react'\nimport Nav from './pages/Nav'\nimport HomePage from './pages/HomePage'\nimport Shop from './pages/Shop'\nimport About from './pages/About'\nimport GameDetail from './GameDetail'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css'\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/about' component={About} />\n          <Route exact path='/shop' component={Shop} />\n          <Route path='/shop/:id' component={GameDetail} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}